module Main exposing (..)

import Browser
import Canvas
import CanvasColor as Color exposing (Color)
import Html exposing (Html)
import Html.Attributes exposing (style)

-- Las coordenadas de cada una de las esquinas del
-- poligono que se dibujara
fractal : List (Float, Float)
fractal = [
    (300, 200),
    (400, 400),
    (200, 400)]

fractal2 : List (List (Float, Float))
fractal2 = [[
    (300, 200),
    (400, 400),
    (200, 400)]]

pm : (Float, Float) -> (Float, Float) -> (Float, Float)
pm x y = case (x,y) of
        ((x1 , y1),(x2, y2) ) ->  ((x1 + x2)/2, (y1 + y2)/2)

vuelta x = case x of
          x1::x2::x3::xs -> (pm x1 x2) :: (pm x1 x3) :: (pm x2 x3) ::[]
          _ -> []



t1 : List (Float, Float) -> List (Float, Float)
t1 l1 = case l1 of
    [] -> []
    x1::x2::x3::xs -> x1::(pm x1 x2)::(pm x3 x1)::[]
    [_] -> []
    [_,_] -> []

t2 : List (Float, Float) -> List (Float, Float)
t2 l1 = case l1 of
    [] -> []
    x1::x2::x3::xs -> x2::(pm x1 x2)::(pm x2 x3)::[]
    [_] -> []
    [_,_] -> []

t3 : List (Float, Float) -> List (Float, Float)
t3 l1 = case l1 of
    [] -> []
    x1::x2::x3::xs -> x3::(pm x3 x1)::(pm x2 x3)::[]
    [_] -> []
    [_,_] -> []

aux : Int -> List (Float, Float) -> List (List (Float, Float))
aux n l = case (n, l) of
    (0, []) -> []
    (0, x::xs) -> []
    (ns, x::xs) -> (x::xs)::(vuelta (x::xs))::(aux (ns-1) (t1 (x::xs))) ++ (aux (ns-1) (t2 ((x::xs)))) ++ (aux (ns-1) (t3 (x::xs)))
    (_, []) -> []

pinky x = if x == 0 then fractal2 else aux x fractal 

-- Dada una lista de coordenadas, esta funcion
-- genera los comandos necesarios para dibujar
-- las lineas que connectan dichas coordenadas
dibujar triangulo context =
    let
        acc (x,y) s = s |> Canvas.lineTo x y
    in
        case triangulo of
            (x0,y0)::xs ->
                List.foldl acc (context |> Canvas.moveTo x0 y0) ((x0,y0)::xs)
                |> Canvas.lineTo x0 y0
            _ -> context

dibujartriangulos : List (List ( Float, Float )) -> Canvas.Commands -> Canvas.Commands
dibujartriangulos triangulos context = case triangulos of
    [] -> context
    x::xs -> dibujar x (dibujartriangulos xs context)

-- Funcion que genera el html que corresponde al
-- poligono siendo dibujado
view : Html msg
view =
    let
        width = 600
        height = 600
        poligono = (pinky 0)
    in
        Canvas.element
            width
            height
            [ style "border" "5px solid red" ]
            (
                Canvas.empty
                |> Canvas.clearRect 0 0 width height
                |> dibujartriangulos poligono
                |> Canvas.stroke
            )

main = view


